@model u21503193_HW03.Models.CombinedReportVM
@{
    ViewBag.Title = "Index";
}

<link href="~/Content/Site.css" rel="stylesheet" />

<div class="row">
    <div class="header">
        <h1>Welcome to the Maintenance Page</h1>
    </div>

    <div class="welcome-message">
        <p>This page allows you to manage Authors, Types, and Borrows. You can create, update, and delete records, as well as view them in an organized manner.</p>
    </div>

    <div class="col-md-6">
        <div class="section">
            <div class="row">
                <div class="col-md-6">
                    <h2>Authors</h2>
                </div>
                <div class="col-md-6" style="text-align:right">
                    <a href="#" class="create-link btn btn-light btn-outline-primary" data-url="@Url.Action("Create", "authors")">Create</a>
                </div>
            </div>

            <table class="table table-striped table-bordered table-hover" style="width:100%">
                <thead class="bg-primary" style="color:white">
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            Surname
                        </th>
                        <th>
                            CRUD
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var author in Model.Authors)
                    {
                        <tr>
                            <td>
                                @author.name
                            </td>
                            <td>
                                @author.surname
                            </td>
                            <td class="text-center">
                                <a href="#" class="edit-link" data-url="@Url.Action("Edit", "authors", new { id = author.authorId})">Edit</a>
                                <a href="#" class="details-link" data-url="@Url.Action("Details", "authors", new { id = author.authorId})">Details</a>
                                <a href="#" class="delete-link" data-url="@Url.Action("Delete", "authors", new { id = author.authorId})">Delete</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <ul class="pagination">
                @if (Model.Authors.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber - 1, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber })">Previous</a>
                    </li>
                }

                @if (Model.Authors.PageCount <= 7)
                {
                    for (int i = 1; i <= Model.Authors.PageCount; i++)
                    {
                        <li class="page-item @(i == Model.Authors.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { authorPage = i, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber })">@i</a>
                        </li>
                    }
                }
                else
                {
                    int startPage = Math.Max(1, Model.Authors.PageNumber - 2);
                    int endPage = Math.Min(Model.Authors.PageCount, Model.Authors.PageNumber + 2);

                    if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { authorPage = 1, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber })">1</a>
                        </li>
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }

                    for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.Authors.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { authorPage = i, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber })">@i</a>
                        </li>
                    }

                    if (endPage < Model.Authors.PageCount)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageCount, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber })">@Model.Authors.PageCount</a>
                        </li>
                    }
                }

                @if (Model.Authors.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber + 1, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber })">Next</a>
                    </li>
                }
            </ul>
        </div>
            </div>

            <div class="col-md-6">
                <div class="section">
                    <div class="row">
                        <div class="col-md-6">
                            <h2>Types</h2>
                        </div>
                        <div class="col-md-6" style="text-align:right">
                            <a href="#" class="create-link btn btn-light btn-outline-primary" data-url="@Url.Action("Create", "types")">Create</a>
                        </div>
                    </div>

                    <table class="table table-striped table-bordered" style="width:100%">
                        <thead class="bg-primary" style="color:white">
                            <tr>
                                <th>
                                    Name
                                </th>
                                <th>
                                    CRUD
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var type in Model.Types)
                            {
                                <tr>
                                    <td>
                                        @type.name
                                    </td>
                                    <td class="text-center">
                                        <a href="#" class="edit-link" data-url="@Url.Action("Edit", "types", new { id = type.typeId})">Edit</a>
                                        <a href="#" class="details-link" data-url="@Url.Action("Details", "types", new { id = type.typeId})">Details</a>
                                        <a href="#" class="delete-link" data-url="@Url.Action("Delete", "types", new { id = type.typeId})">Delete</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <ul class="pagination">
                        @if (Model.Types.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber - 1, borrowPage = Model.Borrows.PageNumber })">Previous</a>
                            </li>
                        }

                        @if (Model.Types.PageCount <= 7)
                        {
                            for (int i = 1; i <= Model.Types.PageCount; i++)
                            {
                                <li class="page-item @(i == Model.Types.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = i, borrowPage = Model.Borrows.PageNumber })">@i</a>
                                </li>
                            }
                        }
                        else
                        {
                            int startPage = Math.Max(1, Model.Types.PageNumber - 2);
                            int endPage = Math.Min(Model.Types.PageCount, Model.Types.PageNumber + 2);

                            if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = 1, borrowPage = Model.Borrows.PageNumber })">1</a>
                                </li>
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.Types.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = i, borrowPage = Model.Borrows.PageNumber })">@i</a>
                                </li>
                            }

                            if (endPage < Model.Types.PageCount)
                            {
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageCount, borrowPage = Model.Borrows.PageNumber })">@Model.Types.PageCount</a>
                                </li>
                            }
                        }

                        @if (Model.Types.HasNextPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber + 1, borrowPage = Model.Borrows.PageNumber })">Next</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="col-md-12">
                <div class="section">
                    <div class="row">
                        <div class="col-md-6">
                            <h2>Borrows</h2>
                        </div>
                        <div class="col-md-6" style="text-align:right">
                            <a href="#" class="create-link btn btn-light btn-outline-primary" data-url="@Url.Action("Create", "borrows")">Create</a>
                        </div>
                    </div>

                    <table class="table table-striped table-bordered" style="width:100%">
                        <thead class="bg-primary" style="color:white">
                            <tr>
                                <th>
                                    Student Name
                                </th>
                                <th>
                                    Book Name
                                </th>
                                <th>
                                    Taken Date
                                </th>
                                <th>
                                    Brought Date
                                </th>
                                <th>
                                    CRUD
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var borrow in Model.Borrows)
                            {
                                <tr>
                                    <td>
                                        @borrow.students.name
                                    </td>
                                    <td>
                                        @borrow.books.name
                                    </td>
                                    <td>
                                        @borrow.takenDate
                                    </td>
                                    <td>
                                        @borrow.broughtDate
                                    </td>
                                    <td class="text-center">
                                        <a href="#" class="edit-link" data-url="@Url.Action("Edit", "borrows", new { id = borrow.borrowId})">Edit</a>
                                        <a href="#" class="details-link" data-url="@Url.Action("Details", "borrows", new { id = borrow.borrowId})">Details</a>
                                        <a href="#" class="delete-link" data-url="@Url.Action("Delete", "borrows", new { id = borrow.borrowId})">Delete</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <ul class="pagination">
                        @if (Model.Borrows.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber - 1 })">Previous</a>
                            </li>
                        }

                        @if (Model.Borrows.PageCount <= 7)
                        {
                            for (int i = 1; i <= Model.Borrows.PageCount; i++)
                            {
                                <li class="page-item @(i == Model.Borrows.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber, borrowPage = i })">@i</a>
                                </li>
                            }
                        }
                        else
                        {
                            int startPage = Math.Max(1, Model.Borrows.PageNumber - 2);
                            int endPage = Math.Min(Model.Borrows.PageCount, Model.Borrows.PageNumber + 2);

                            if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber, borrowPage = 1 })">1</a>
                                </li>
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                            }

                            for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.Borrows.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber, borrowPage = i })">@i</a>
                                </li>
                            }

                            if (endPage < Model.Borrows.PageCount)
                            {
                                <li class="page-item disabled"><span class="page-link">...</span></li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageCount })">@Model.Borrows.PageCount</a>
                                </li>
                            }
                        }

                        @if (Model.Borrows.HasNextPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { authorPage = Model.Authors.PageNumber, typePage = Model.Types.PageNumber, borrowPage = Model.Borrows.PageNumber + 1 })">Next</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

<div id="myModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-content">
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        // Function to handle Edit link click event in the Combined View and Details modal
        $(".edit-link, .edit-link-in-modal").click(function (e) {
            e.preventDefault();
            var url = $(this).data("url");

            $.get(url, function (data) {
                $("#modal-content").empty();
                $("#modal-content").html(data);
                $("#myModal").modal("show");
            });
        });

        // Function to handle form submission within the modal
        $("#modal-content").on("submit", "form", function (e) {
            e.preventDefault();
            var form = $(this);
            var url = form.attr("action");
            var formData = form.serialize();

            $.post(url, formData, function (data) {
                $("#myModal").modal("hide");
                location.reload();
            });
        });

        // Function to handle other links (details, delete, create) within the modal
        $(".details-link, .delete-link, .create-link").click(function (e) {
            e.preventDefault();
            var url = $(this).data("url");

            $.get(url, function (data) {
                $("#modal-content").empty();
                $("#modal-content").html(data);
                $("#myModal").modal("show");
            });
        });
    });
</script>